{
  "PathBar": "<template>\r\n  <div class=\"path-bar\">\r\n    <div\r\n      v-for=\"(item, index) in tabs\"\r\n      :key=\"index\"\r\n      class=\"path-item\"\r\n      :class=\"{\r\n        active: activeTab === item.key,\r\n      }\"\r\n      @click=\"() => goPage(item)\"\r\n    >\r\n      <div class=\"text\">{{ item.name }}</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue, { PropOptions } from 'vue'\r\n\r\ninterface TabType {\r\n  key: string\r\n  name: string\r\n}\r\n\r\nexport default Vue.extend({\r\n  name: 'PathBar',\r\n  props: {\r\n    tabs: {\r\n      type: Array,\r\n      required: true,\r\n    } as PropOptions<TabType[]>,\r\n    activeTab: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    goPage(item: any) {\r\n      this.$emit('select', item.key)\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.path-bar {\r\n  @include flexR;\r\n  display: inline-flex;\r\n  box-shadow: $shadow;\r\n  border-radius: 4px !important;\r\n  background-color: $onPrimary;\r\n  overflow: hidden;\r\n  .path-item {\r\n    width: 120px;\r\n    height: 40px;\r\n    background: $secondary;\r\n    color: $onSecondary;\r\n    &.active {\r\n      background-color: $primary;\r\n      color: $onPrimary;\r\n    }\r\n    .text {\r\n      text-align: center;\r\n      font-size: 14px;\r\n      font-weight: 400;\r\n      line-height: 40px;\r\n      line-height: 40px;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}\r\n</style>\r\n",
  "SwitchButton": "<template>\r\n  <div class=\"switch-button\" :class=\"{ active: value }\">\r\n    <div\r\n      v-for=\"item in tabs\"\r\n      :key=\"item.key\"\r\n      class=\"option\"\r\n      :class=\"{ active: item.key === activeTab }\"\r\n      @click=\"$emit('select', item.key)\"\r\n    >\r\n      {{ item.name }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from 'vue'\r\n\r\nexport default Vue.extend({\r\n  name: 'SwitchButton',\r\n  props: {\r\n    tabs: {\r\n      type: Array,\r\n      required: true,\r\n    },\r\n    activeTab: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      value: false,\r\n    }\r\n  },\r\n  methods: {\r\n    changOption(): void {\r\n      this.$emit('select', this.value)\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.switch-button {\r\n  width: 160px;\r\n  height: 24px;\r\n  border-radius: 4px;\r\n  background: $surface;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  border: 1px solid $primary;\r\n  cursor: pointer;\r\n  @include flexRsa;\r\n  .option {\r\n    width: 50%;\r\n    z-index: 20;\r\n    line-height: 22px;\r\n    font-size: 12px;\r\n    font-weight: 400;\r\n    transition: color;\r\n    text-align: center;\r\n    color: $primary;\r\n    &.active {\r\n      color: $surface;\r\n      background-color: $primary;\r\n    }\r\n  }\r\n}\r\n</style>\r\n",
  "TabBar": "<template>\r\n  <div class=\"tab-bar\" :style=\"tabStyle\">\r\n    <div\r\n      v-for=\"tab in tabs\"\r\n      :key=\"tab.key\"\r\n      class=\"tab\"\r\n      :class=\"{ selected: tab.key === activeTab }\"\r\n      @click=\"$emit('select', tab.key)\"\r\n    >\r\n      {{ tab.name }}\r\n    </div>\r\n    <div class=\"indicator\" :style=\"indicatorStyle\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue, { PropOptions } from 'vue'\r\n\r\ninterface TabType {\r\n  key: string\r\n  name: string\r\n}\r\n\r\nexport default Vue.extend({\r\n  name: 'TabBar',\r\n  props: {\r\n    tabs: {\r\n      type: Array,\r\n      required: true,\r\n    } as PropOptions<TabType[]>,\r\n    activeTab: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n  },\r\n  computed: {\r\n    active(): string {\r\n      return this.activeTab\r\n    },\r\n    tabStyle(): { gridTemplateColumns: string } {\r\n      return {\r\n        gridTemplateColumns: `repeat(${this.tabs.length}, 1fr)`,\r\n      }\r\n    },\r\n\r\n    indicatorStyle(): { left: string; width: string } {\r\n      const index = this.tabs.map((t) => t.name).indexOf(this.active)\r\n      const width = 100 / this.tabs.length + '%'\r\n      const left = (100 / this.tabs.length) * index + '%'\r\n      return {\r\n        left,\r\n        width,\r\n      }\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.tab-bar {\r\n  position: relative;\r\n  height: 40px;\r\n  display: grid;\r\n  .tab {\r\n    cursor: pointer;\r\n    padding: 4px 10px;\r\n    width: 100%;\r\n    color: $onSecondary;\r\n    z-index: 5;\r\n    @include flexCc;\r\n    &.selected {\r\n      color: $onPrimary;\r\n      transition: color 0.3s ease-out;\r\n    }\r\n  }\r\n  .indicator {\r\n    position: absolute;\r\n    height: 32px;\r\n    margin: 4px 0px;\r\n    border-radius: 16px;\r\n    width: 50%;\r\n    left: 0%;\r\n    background: $primary;\r\n    transition: all 0.3s ease-out;\r\n  }\r\n}\r\n</style>\r\n"
}
