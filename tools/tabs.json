{
  "PathBar": "<template>\n  <div class=\"path-bar\">\n    <div\n      v-for=\"(item, index) in tabs\"\n      :key=\"index\"\n      class=\"path-item\"\n      :class=\"{\n        active: activeTab === item.key,\n      }\"\n      @click=\"() => goPage(item)\"\n    >\n      <div class=\"text\">{{ item.name }}</div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue, { PropOptions } from 'vue'\n\ninterface TabType {\n  key: string\n  name: string\n}\n\nexport default Vue.extend({\n  name: 'PathBar',\n  props: {\n    tabs: {\n      type: Array,\n      required: true,\n    } as PropOptions<TabType[]>,\n    activeTab: {\n      type: String,\n      default: '',\n    },\n  },\n\n  methods: {\n    goPage(item: any) {\n      this.$emit('select', item.key)\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n.path-bar {\n  @include flexR;\n  display: inline-flex;\n  box-shadow: $shadow;\n  border-radius: 4px !important;\n  background-color: $onPrimary;\n  overflow: hidden;\n  .path-item {\n    width: 120px;\n    height: 40px;\n    background: $secondary;\n    color: $onSecondary;\n    &.active {\n      background-color: $primary;\n      color: $onPrimary;\n    }\n    .text {\n      text-align: center;\n      font-size: 14px;\n      font-weight: 400;\n      line-height: 40px;\n      line-height: 40px;\n      cursor: pointer;\n    }\n  }\n}\n</style>\n",
  "SwitchButton": "<template>\n  <div class=\"switch-button\" :class=\"{ active: value }\">\n    <div\n      v-for=\"item in tabs\"\n      :key=\"item.key\"\n      class=\"option\"\n      :class=\"{ active: item.key === activeTab }\"\n      @click=\"$emit('select', item.key)\"\n    >\n      {{ item.name }}\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'SwitchButton',\n  props: {\n    tabs: {\n      type: Array,\n      required: true,\n    },\n    activeTab: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      value: false,\n    }\n  },\n  methods: {\n    changOption(): void {\n      this.$emit('select', this.value)\n    },\n  },\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.switch-button {\n  width: 160px;\n  height: 24px;\n  border-radius: 4px;\n  background: $surface;\n  box-sizing: border-box;\n  position: relative;\n  border: 1px solid $primary;\n  cursor: pointer;\n  @include flexRsa;\n  .option {\n    width: 50%;\n    z-index: 20;\n    line-height: 22px;\n    font-size: 12px;\n    font-weight: 400;\n    transition: color;\n    text-align: center;\n    color: $primary;\n    &.active {\n      color: $surface;\n      background-color: $primary;\n    }\n  }\n}\n</style>\n",
  "TabBar": "<template>\n  <div class=\"tab-bar\" :style=\"tabStyle\">\n    <div\n      v-for=\"tab in tabs\"\n      :key=\"tab.key\"\n      class=\"tab\"\n      :class=\"{ selected: tab.key === activeTab }\"\n      @click=\"$emit('select', tab.key)\"\n    >\n      {{ tab.name }}\n    </div>\n    <div class=\"indicator\" :style=\"indicatorStyle\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue, { PropOptions } from 'vue'\n\ninterface TabType {\n  key: string\n  name: string\n}\n\nexport default Vue.extend({\n  name: 'TabBar',\n  props: {\n    tabs: {\n      type: Array,\n      required: true,\n    } as PropOptions<TabType[]>,\n    activeTab: {\n      type: String,\n      default: '',\n    },\n  },\n  computed: {\n    active(): string {\n      return this.activeTab\n    },\n    tabStyle(): { gridTemplateColumns: string } {\n      return {\n        gridTemplateColumns: `repeat(${this.tabs.length}, 1fr)`,\n      }\n    },\n\n    indicatorStyle(): { left: string; width: string } {\n      const index = this.tabs.map((t) => t.name).indexOf(this.active)\n      const width = 100 / this.tabs.length + '%'\n      const left = (100 / this.tabs.length) * index + '%'\n      return {\n        left,\n        width,\n      }\n    },\n  },\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.tab-bar {\n  position: relative;\n  height: 40px;\n  display: grid;\n  .tab {\n    cursor: pointer;\n    padding: 4px 10px;\n    width: 100%;\n    color: $onSecondary;\n    z-index: 5;\n    @include flexCc;\n    &.selected {\n      color: $onPrimary;\n      transition: color 0.3s ease-out;\n    }\n  }\n  .indicator {\n    position: absolute;\n    height: 32px;\n    margin: 4px 0px;\n    border-radius: 16px;\n    width: 50%;\n    left: 0%;\n    background: $primary;\n    transition: all 0.3s ease-out;\n  }\n}\n</style>\n"
}
